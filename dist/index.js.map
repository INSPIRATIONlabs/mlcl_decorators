{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,4BAA0B;AAC1B,4BAA4B;AAE5B,oBAA2B,MAAW;IAGpC,IAAI,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAKtD,IAAI,aAAa,GAAG,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IACzD,IAAI,gBAAgB,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEnE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtB,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;QAC7B,CAAC;QACD,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;QAC9C,CAAC;IACH,CAAC;AACH,CAAC;AAnBD,gCAmBC;AAED;AAEA,CAAC;AAFD,wBAEC;AAED,uBAA8B,MAAW;IACvC,IAAI,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IACtD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5C,CAAC;AAHD,sCAGC;AAED,4BAAmC,MAAW;IAG5C,IAAI,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAKtD,IAAI,aAAa,GAAG,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IACzD,IAAI,gBAAgB,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnE,MAAM,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,GAAG,MAAM,CAAC;IAEnD,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtB,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;QAC7B,CAAC;QACD,MAAM,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,GAAG,MAAM,CAAC;IACrD,CAAC;AACH,CAAC;AAlBD,gDAkBC;AAED,mBAA0B,MAAW;IACnC,UAAU,CAAC,MAAM,CAAC,CAAC;IACnB,IAAI,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAI7C,IAAI,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAKpD,IAAI,aAAa,GAAG,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IACzD,IAAI,eAAe,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEjE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;QACrB,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;QAC5B,CAAC;QACD,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI,iBAAiB,GAAG,IAAI,gBAAgB,EAAE,CAAC;YAC/C,iBAAiB,CAAC,IAAI,GAAG,KAAK,CAAC;YAC/B,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC;QACxD,CAAC;IACH,CAAC;IAED,IAAI,cAAc,GAAG,MAAM,CAAC,gBAAgB,EAAE,UAAS,IAAI;QACzD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IACH,cAAc,CAAC,IAAI,GAAG,MAAM,CAAC;IAC7B,kBAAkB,CAAC,cAAc,CAAC,CAAC;IAInC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAC3B,CAAC;AApCD,8BAoCC;AAED,gBAAgB,GAAG,EAAE,IAAI;IACvB,IAAI,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAC9C,IAAI,CAAC,SAAS,EAAC,aAAa,CAC7B,CAAC;IACF,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC9C,IAAI,OAAO,GAAG;QACZ,SAAS,EAAE,UAAS,MAAM,EAAE,IAAI;YAC9B,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAC,GAAG,EAAC,IAAI,CAAC,CAAC;YAC5B,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;QACD,KAAK,EAAE,UAAS,MAAM,EAAE,IAAI,EAAE,IAAI;YAEhC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC;QACxB,CAAC;KACF,CAAC;IACF,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,EAAC,OAAO,CAAC,CAAC;IACpC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;IACzB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5B,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;IACjE,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE;QAC7C,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI;KACzB,CAAC,CAAC;IACH,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnB,MAAM,CAAC,KAAK,CAAC;AACf,CAAC","file":"index.js","sourcesContent":["'use strict';\r\nimport 'reflect-metadata';\r\nimport * as _ from 'lodash';\r\n\r\nexport function injectable(target: any) {\r\n    // create a unique, global symbol name\r\n  // -----------------------------------\r\n  let injectableKey = Symbol.for('mlcl.di.injectables');\r\n\r\n  // check if the global object has this symbol\r\n  // add it if it does not have the symbol, yet\r\n  // ------------------------------------------\r\n  let globalSymbols = Object.getOwnPropertySymbols(global);\r\n  let hasInjectableKey = (globalSymbols.indexOf(injectableKey) > -1);\r\n  \r\n  if (!hasInjectableKey) {\r\n    if(!_.isObject(global[injectableKey])) {\r\n      global[injectableKey] = {};\r\n    }\r\n    if(!_.isObject(global[injectableKey][target.name])) {\r\n      global[injectableKey][target.name] = target;\r\n    }\r\n  }\r\n}\r\n\r\nexport function inject() {\r\n\r\n}\r\n\r\nexport function getInjectable(target: any) {\r\n  let injectableKey = Symbol.for('mlcl.di.injectables');\r\n  return global[injectableKey][target.name];\r\n}\r\n\r\nexport function overrideInjectable(target: any ) {\r\n    // create a unique, global symbol name\r\n  // -----------------------------------\r\n  let injectableKey = Symbol.for('mlcl.di.injectables');\r\n\r\n  // check if the global object has this symbol\r\n  // add it if it does not have the symbol, yet\r\n  // ------------------------------------------\r\n  let globalSymbols = Object.getOwnPropertySymbols(global);\r\n  let hasInjectableKey = (globalSymbols.indexOf(injectableKey) > -1);\r\n  global[injectableKey]['MySingletonClass'] = target;\r\n\r\n  if (!hasInjectableKey) {\r\n    if(!_.isObject(global[injectableKey])) {\r\n      global[injectableKey] = {};\r\n    }\r\n    global[injectableKey]['MySingletonClass'] = target;\r\n  }\r\n}\r\n\r\nexport function singleton(target: any) {\r\n  injectable(target);\r\n  let injectableTarget = getInjectable(target);\r\n  \r\n  // create a unique, global symbol name\r\n  // -----------------------------------\r\n  let singletonKey = Symbol.for('mlcl.di.singletons');\r\n\r\n  // check if the global object has this symbol\r\n  // add it if it does not have the symbol, yet\r\n  // ------------------------------------------\r\n  let globalSymbols = Object.getOwnPropertySymbols(global);\r\n  let hasSingletonKey = (globalSymbols.indexOf(singletonKey) > -1);\r\n\r\n  if (!hasSingletonKey) {\r\n    if(!_.isObject(global[singletonKey])) {\r\n      global[singletonKey] = {};\r\n    }\r\n    if(!_.isObject(global[singletonKey][target.name])) {\r\n      let singletonInstance = new injectableTarget();\r\n      singletonInstance.test = 'hey';\r\n      global[singletonKey][target.name] = singletonInstance;\r\n    }\r\n  }\r\n\r\n  let targetModified = extend(injectableTarget, function(args) {\r\n    console.log('target');\r\n    console.log(global[singletonKey][target.name]);\r\n    return global[singletonKey][target.name];\r\n  });\r\n  targetModified.test = 'huhu';\r\n  overrideInjectable(targetModified);\r\n\r\n  // ensure the API is never changed\r\n  // -------------------------------\r\n  Object.freeze(singleton);\r\n}\r\n\r\nfunction extend(sup, base) {\r\n  let descriptor = Object.getOwnPropertyDescriptor(\r\n    base.prototype,'constructor'\r\n  );\r\n  base.prototype = Object.create(sup.prototype);\r\n  let handler = {\r\n    construct: function(target, args) {\r\n      let obj = Object.create(base.prototype);\r\n      this.apply(target,obj,args);\r\n      return obj;\r\n    },\r\n    apply: function(target, that, args) {\r\n      // sup.apply(that,args);\r\n      base.apply(that,args);\r\n    }\r\n  };\r\n  let proxy = new Proxy(base,handler);\r\n  descriptor.value = proxy;\r\n  console.log(base.prototype);\r\n  Object.defineProperty(base.prototype, 'constructor', descriptor);\r\n  Object.defineProperty(proxy.prototype, 'name', {\r\n    get: base.prototype.name\r\n  });\r\n  console.log('+++');\r\n  console.log(proxy.prototype);\r\n  console.log(proxy);\r\n  return proxy;\r\n}"]}